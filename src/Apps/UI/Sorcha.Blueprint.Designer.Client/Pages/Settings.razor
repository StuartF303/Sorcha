@page "/settings"
@using Sorcha.Blueprint.Designer.Client.Models
@using Sorcha.Blueprint.Designer.Client.Components
@using Blazored.LocalStorage
@using System.Text.Json
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Settings - Blueprint Designer</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
            Application Settings
        </MudText>

        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
            <!-- Schema Providers Tab -->
            <MudTabPanel Text="Schema Providers" Icon="@Icons.Material.Filled.Cloud">
                <MudText Typo="Typo.body1" Class="mb-4">
                    Configure external schema provider sources. These providers allow you to import schemas from remote repositories.
                </MudText>

                @if (schemaProviders.Any())
                {
                    <MudTable Items="@schemaProviders" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true">
                        <HeaderContent>
                            <MudTh>Enabled</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>URI</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Enabled">
                                <MudSwitch Value="context.IsEnabled"
                                           Color="Color.Success"
                                           Size="Size.Small"
                                           T="bool"
                                           ValueChanged="@((bool newValue) => { context.IsEnabled = newValue; SaveSchemaProviders(); })" />
                            </MudTd>
                            <MudTd DataLabel="Name">
                                <MudText>
                                    @context.Name
                                    @if (context.IsBuiltIn)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="ml-2">Built-in</MudChip>
                                    }
                                </MudText>
                            </MudTd>
                            <MudTd DataLabel="URI">
                                <MudLink Href="@context.Uri" Target="_blank">@context.Uri</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Description">@context.Description</MudTd>
                            <MudTd DataLabel="Actions">
                                @if (!context.IsBuiltIn)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="@(() => DeleteProvider(context.Id))" />
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">No schema providers configured.</MudAlert>
                }

                <MudButton StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           OnClick="OpenAddProviderDialog"
                           Class="mt-4">
                    Add Schema Provider
                </MudButton>
            </MudTabPanel>

            <!-- Color Scheme Tab -->
            <MudTabPanel Text="Appearance" Icon="@Icons.Material.Filled.Palette">
                <MudText Typo="Typo.h6" Class="mb-3">Color Scheme</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    Customize the appearance of the Blueprint Designer
                </MudText>

                <MudRadioGroup @bind-Value="selectedTheme">
                    <MudRadio Value="@("light")" Color="Color.Primary">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.LightMode" Class="mr-2" />
                            Light Theme
                        </div>
                    </MudRadio>
                    <MudRadio Value="@("dark")" Color="Color.Primary">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.DarkMode" Class="mr-2" />
                            Dark Theme
                        </div>
                    </MudRadio>
                    <MudRadio Value="@("auto")" Color="Color.Primary">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Brightness4" Class="mr-2" />
                            Auto (System Preference)
                        </div>
                    </MudRadio>
                </MudRadioGroup>

                <MudDivider Class="my-4" />

                <MudText Typo="Typo.h6" Class="mb-3">Canvas Settings</MudText>
                <MudSwitch @bind-Value="showGrid"
                           Label="Show Grid"
                           Color="Color.Primary"
                           Class="mb-2" />
                <MudSwitch @bind-Value="snapToGrid"
                           Label="Snap to Grid"
                           Color="Color.Primary" />

                <MudButton StartIcon="@Icons.Material.Filled.Save"
                           Color="Color.Success"
                           Variant="Variant.Filled"
                           OnClick="SaveAppearanceSettings"
                           Class="mt-4">
                    Save Appearance Settings
                </MudButton>
            </MudTabPanel>

            <!-- Version/Build Tab -->
            <MudTabPanel Text="About" Icon="@Icons.Material.Filled.Info">
                <MudText Typo="Typo.h5" Class="mb-2">Sorcha Blueprint Designer</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    A visual designer for creating blockchain workflow blueprints
                </MudText>

                <MudDivider Class="my-4" />

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3" Outlined="true">
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Version Information</MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Version:</strong> 1.0.0-preview
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Build:</strong> @buildNumber
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Framework:</strong> .NET 10.0
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Platform:</strong> Blazor WebAssembly
                            </MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3" Outlined="true">
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Dependencies</MudText>
                            <MudText Typo="Typo.body2">
                                <strong>MudBlazor:</strong> 8.0.0
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Blazor.Diagrams:</strong> Latest
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Blazored.LocalStorage:</strong> Latest
                            </MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />

                <MudText Typo="Typo.subtitle2" Class="mb-2">License</MudText>
                <MudText Typo="Typo.body2">
                    MIT License - Copyright (c) 2025 Sorcha Contributors
                </MudText>

                <MudDivider Class="my-4" />

                <MudText Typo="Typo.subtitle2" Class="mb-2">Links</MudText>
                <MudLink Href="https://github.com/sorcha/blueprint-designer" Target="_blank" Class="d-block mb-1">
                    <MudIcon Icon="@Icons.Custom.Brands.GitHub" Size="Size.Small" Class="mr-1" />
                    GitHub Repository
                </MudLink>
                <MudLink Href="https://docs.sorcha.io" Target="_blank" Class="d-block">
                    <MudIcon Icon="@Icons.Material.Filled.MenuBook" Size="Size.Small" Class="mr-1" />
                    Documentation
                </MudLink>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</MudContainer>

@code {
    private List<SchemaProvider> schemaProviders = new();
    private string selectedTheme = "light";
    private bool showGrid = true;
    private bool snapToGrid = true;
    private string buildNumber = $"{DateTime.Now:yyyyMMdd}.{DateTime.Now:HHmm}";

    private const string SCHEMA_PROVIDERS_KEY = "sorcha:schemaProviders";
    private const string APPEARANCE_SETTINGS_KEY = "sorcha:appearanceSettings";

    protected override async Task OnInitializedAsync()
    {
        await LoadSchemaProviders();
        await LoadAppearanceSettings();
    }

    private async Task LoadSchemaProviders()
    {
        try
        {
            var json = await LocalStorage.GetItemAsStringAsync(SCHEMA_PROVIDERS_KEY);
            if (!string.IsNullOrEmpty(json))
            {
                schemaProviders = JsonSerializer.Deserialize<List<SchemaProvider>>(json) ?? new List<SchemaProvider>();
            }
            else
            {
                // Initialize with built-in providers
                schemaProviders = new List<SchemaProvider>
                {
                    new SchemaProvider
                    {
                        Id = "schema-org",
                        Name = "Schema.org",
                        Uri = "https://schema.org",
                        Description = "Structured data vocabularies for web content",
                        IsBuiltIn = true,
                        IsEnabled = true
                    },
                    new SchemaProvider
                    {
                        Id = "json-schema-org",
                        Name = "JSON Schema",
                        Uri = "https://json-schema.org",
                        Description = "JSON Schema specification and examples",
                        IsBuiltIn = true,
                        IsEnabled = true
                    }
                };
                await SaveSchemaProviders();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading schema providers: {ex.Message}", Severity.Error);
            schemaProviders = new List<SchemaProvider>();
        }
    }

    private async Task SaveSchemaProviders()
    {
        try
        {
            var json = JsonSerializer.Serialize(schemaProviders);
            await LocalStorage.SetItemAsStringAsync(SCHEMA_PROVIDERS_KEY, json);
            Snackbar.Add("Schema providers saved", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving schema providers: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteProvider(string id)
    {
        var provider = schemaProviders.FirstOrDefault(p => p.Id == id);
        if (provider != null && !provider.IsBuiltIn)
        {
            schemaProviders.Remove(provider);
            await SaveSchemaProviders();
            Snackbar.Add($"Deleted provider: {provider.Name}", Severity.Info);
        }
    }

    private async Task OpenAddProviderDialog()
    {
        var parameters = new DialogParameters<AddSchemaProviderDialog>();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddSchemaProviderDialog>("Add Schema Provider", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is SchemaProvider newProvider)
        {
            schemaProviders.Add(newProvider);
            await SaveSchemaProviders();
            Snackbar.Add($"Added provider: {newProvider.Name}", Severity.Success);
        }
    }

    private async Task LoadAppearanceSettings()
    {
        try
        {
            var json = await LocalStorage.GetItemAsStringAsync(APPEARANCE_SETTINGS_KEY);
            if (!string.IsNullOrEmpty(json))
            {
                var settings = JsonSerializer.Deserialize<Dictionary<string, object>>(json);
                if (settings != null)
                {
                    if (settings.ContainsKey("theme"))
                        selectedTheme = settings["theme"].ToString() ?? "light";
                    if (settings.ContainsKey("showGrid"))
                        showGrid = bool.Parse(settings["showGrid"].ToString() ?? "true");
                    if (settings.ContainsKey("snapToGrid"))
                        snapToGrid = bool.Parse(settings["snapToGrid"].ToString() ?? "true");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading appearance settings: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveAppearanceSettings()
    {
        try
        {
            var settings = new Dictionary<string, object>
            {
                { "theme", selectedTheme },
                { "showGrid", showGrid },
                { "snapToGrid", snapToGrid }
            };
            var json = JsonSerializer.Serialize(settings);
            await LocalStorage.SetItemAsStringAsync(APPEARANCE_SETTINGS_KEY, json);
            Snackbar.Add("Appearance settings saved", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving appearance settings: {ex.Message}", Severity.Error);
        }
    }

    [Inject]
    private IDialogService DialogService { get; set; } = default!;
}
