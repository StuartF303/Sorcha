@using Sorcha.Blueprint.Designer.Client.Models
@using Sorcha.Blueprint.Models
@using System.Text.Json.Nodes

<MudDrawer @bind-Open="@IsOpen"
           Anchor="Anchor.Right"
           Elevation="2"
           Variant="@DrawerVariant.Temporary"
           Width="400px"
           ClipMode="DrawerClipMode.Always">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Action Properties</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Close"
                       Color="Color.Default"
                       OnClick="@(() => IsOpen = false)" />
    </MudDrawerHeader>
    <MudDivider />
    <div class="pa-4" style="height: 100%; overflow-y: auto;">
        @if (SelectedNode == null)
        {
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Select an action to view properties
            </MudText>
        }
        else if (SelectedNode is ActionNodeModel actionNode)
        {
            <div class="d-flex justify-end mb-4">
                <MudButton Variant="Variant.Text"
                           Color="@(IsEditMode ? Color.Success : Color.Primary)"
                           Size="Size.Small"
                           StartIcon="@(IsEditMode ? Icons.Material.Filled.Check : Icons.Material.Filled.Edit)"
                           OnClick="ToggleEditMode">
                    @(IsEditMode ? "Done" : "Edit")
                </MudButton>
            </div>

            <!-- Basic Information -->
            <MudText Typo="Typo.subtitle1" Class="mb-3">
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-2" />
                Basic Information
            </MudText>

            <MudTextField @bind-Value="actionNode.Action.Title"
                          Label="Title"
                          Variant="Variant.Outlined"
                          Class="mb-3"
                          ReadOnly="@(!IsEditMode)"
                          OnBlur="@(() => UpdateNodeTitle(actionNode))" />

            <MudTextField @bind-Value="actionNode.Action.Description"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Class="mb-3"
                          Lines="3"
                          ReadOnly="@(!IsEditMode)" />

            <MudTextField @bind-Value="actionNode.Action.Sender"
                          Label="Sender"
                          Variant="Variant.Outlined"
                          Class="mb-3"
                          ReadOnly="@(!IsEditMode)"
                          HelperText="Address of the sender (participant)" />

            <MudDivider Class="my-4" />

            <!-- Participants Section -->
            <MudExpansionPanels MultiExpansion="true" Class="mb-3">
                <MudExpansionPanel Text="Participants" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-2" Size="Size.Small" />
                            <MudText>Participants</MudText>
                            @if (actionNode.Action.Participants != null)
                            {
                                <MudChip T="string" Size="Size.Small" Class="ml-2">@actionNode.Action.Participants.Count()</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            Reference participants from the blueprint's global participant list
                        </MudText>

                        @if (CurrentBlueprint != null && CurrentBlueprint.Participants.Any())
                        {
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Available Participants</MudText>
                            @foreach (var participant in CurrentBlueprint.Participants)
                            {
                                <MudChip T="string"
                                         Size="Size.Small"
                                         Color="Color.Info"
                                         Class="mb-1 mr-1">
                                    @participant.Name
                                </MudChip>
                            }

                            <MudDivider Class="my-3" />

                            <MudText Typo="Typo.subtitle2" Class="mb-2">Action Participants (Conditions)</MudText>
                            @if (actionNode.Action.Participants != null && actionNode.Action.Participants.Any())
                            {
                                @foreach (var participant in actionNode.Action.Participants.Select((p, i) => new { Participant = p, Index = i }))
                                {
                                    <MudPaper Class="pa-3 mb-2" Outlined="true">
                                        <MudTextField @bind-Value="@participant.Participant.Principal"
                                                      Label="Principal (Participant ID/Name)"
                                                      Variant="Variant.Outlined"
                                                      Class="mb-2"
                                                      Dense="true"
                                                      ReadOnly="@(!IsEditMode)"
                                                      HelperText="Reference a participant from the list above" />
                                        <MudText Typo="Typo.caption" Class="mb-1">Criteria (JSON Logic)</MudText>
                                        @foreach (var criteria in participant.Participant.Criteria.Select((c, ci) => new { Criteria = c, Index = ci }))
                                        {
                                            <MudTextField Value="@criteria.Criteria"
                                                          Variant="Variant.Outlined"
                                                          Class="mb-1"
                                                          Dense="true"
                                                          ReadOnly="true" />
                                        }
                                    </MudPaper>
                                }
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Dense="true">No participant conditions defined for this action</MudAlert>
                            }
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Dense="true">
                                No participants defined in blueprint. Go to Blueprint Properties â†’ Participants tab to add participants.
                            </MudAlert>
                        }

                        @if (IsEditMode)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Class="mt-2"
                                       Disabled="true">
                                Add Participant Condition (Coming Soon)
                            </MudButton>
                        }
                    </ChildContent>
                </MudExpansionPanel>

                <!-- Conditions Section -->
                <MudExpansionPanel Text="Routing Condition" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.AccountTree" Class="mr-2" Size="Size.Small" />
                            <MudText>Routing Condition</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            JSON Logic condition that determines the next action in the workflow
                        </MudText>
                        <MudTextField Value="@actionNode.Action.Condition?.ToJsonString()"
                                      Label="Condition (JSON Logic)"
                                      Variant="Variant.Outlined"
                                      Lines="5"
                                      ReadOnly="true"
                                      HelperText="Advanced: Edit via code or condition builder (coming soon)" />
                    </ChildContent>
                </MudExpansionPanel>

                <!-- Calculations Section -->
                <MudExpansionPanel Text="Calculations" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Calculate" Class="mr-2" Size="Size.Small" />
                            <MudText>Calculations</MudText>
                            @if (actionNode.Action.Calculations != null)
                            {
                                <MudChip T="string" Size="Size.Small" Class="ml-2">@actionNode.Action.Calculations.Count</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            User-defined calculations performed on submitted data using JSON Logic
                        </MudText>
                        @if (actionNode.Action.Calculations != null && actionNode.Action.Calculations.Any())
                        {
                            @foreach (var calc in actionNode.Action.Calculations)
                            {
                                <MudPaper Class="pa-3 mb-2" Outlined="true">
                                    <MudText Typo="Typo.subtitle2">@calc.Key</MudText>
                                    <MudTextField Value="@calc.Value.ToJsonString()"
                                                  Variant="Variant.Outlined"
                                                  Lines="3"
                                                  Dense="true"
                                                  ReadOnly="true"
                                                  Class="mt-1" />
                                </MudPaper>
                            }
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Dense="true">No calculations defined</MudAlert>
                        }
                        @if (IsEditMode)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Class="mt-2"
                                       Disabled="true">
                                Add Calculation (Coming Soon)
                            </MudButton>
                        }
                    </ChildContent>
                </MudExpansionPanel>

                <!-- Data Schemas Section -->
                <MudExpansionPanel Text="Data Schemas" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Schema" Class="mr-2" Size="Size.Small" />
                            <MudText>Data Schemas</MudText>
                            @if (actionNode.Action.DataSchemas != null)
                            {
                                <MudChip T="string" Size="Size.Small" Class="ml-2">@actionNode.Action.DataSchemas.Count()</MudChip>
                            }
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            Reference data schemas from the blueprint's global schema list
                        </MudText>

                        @if (CurrentBlueprint != null && CurrentBlueprint.DataSchemas != null && CurrentBlueprint.DataSchemas.Any())
                        {
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Available Schemas (@CurrentBlueprint.DataSchemas.Count)</MudText>
                            <MudAlert Severity="Severity.Info" Dense="true" Class="mb-3">
                                @CurrentBlueprint.DataSchemas.Count schema(s) defined in blueprint. Configure in Blueprint Properties â†’ Data Schemas tab.
                            </MudAlert>

                            <MudDivider Class="my-3" />

                            <MudText Typo="Typo.subtitle2" Class="mb-2">Action Data Schemas</MudText>
                            @if (actionNode.Action.DataSchemas != null && actionNode.Action.DataSchemas.Any())
                            {
                                <MudAlert Severity="Severity.Success" Dense="true">
                                    This action uses @actionNode.Action.DataSchemas.Count() schema(s)
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Dense="true">
                                    No data schemas assigned to this action
                                </MudAlert>
                            }
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Dense="true">
                                No data schemas defined in blueprint. Go to Blueprint Properties â†’ Data Schemas tab to add schemas.
                            </MudAlert>
                        }

                        @if (IsEditMode)
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Add"
                                       Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Class="mt-2"
                                       Disabled="true">
                                Assign Schema (Coming Soon)
                            </MudButton>
                        }
                    </ChildContent>
                </MudExpansionPanel>

                <!-- Form Display Section -->
                <MudExpansionPanel Text="Form Display" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.ViewQuilt" Class="mr-2" Size="Size.Small" />
                            <MudText>Form Display</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                            Configure how data is presented to users
                        </MudText>
                        @if (actionNode.Action.Form != null)
                        {
                            <MudSelect @bind-Value="actionNode.Action.Form.ControlType"
                                       Label="Control Type"
                                       Variant="Variant.Outlined"
                                       Dense="true"
                                       Disabled="@(!IsEditMode)"
                                       Class="mb-2">
                                @foreach (ControlTypes type in Enum.GetValues(typeof(ControlTypes)))
                                {
                                    <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect @bind-Value="actionNode.Action.Form.Layout"
                                       Label="Layout"
                                       Variant="Variant.Outlined"
                                       Dense="true"
                                       Disabled="@(!IsEditMode)"
                                       Class="mb-2">
                                @foreach (LayoutTypes layoutType in Enum.GetValues(typeof(LayoutTypes)))
                                {
                                    <MudSelectItem Value="@layoutType">@layoutType.ToString()</MudSelectItem>
                                }
                            </MudSelect>

                            <MudTextField @bind-Value="actionNode.Action.Form.Title"
                                          Label="Form Title"
                                          Variant="Variant.Outlined"
                                          Dense="true"
                                          ReadOnly="@(!IsEditMode)"
                                          Class="mb-2" />

                            <MudTextField @bind-Value="actionNode.Action.Form.Scope"
                                          Label="Data Scope"
                                          Variant="Variant.Outlined"
                                          Dense="true"
                                          ReadOnly="@(!IsEditMode)"
                                          HelperText="Reference to data values (DID)" />
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Dense="true">No form configuration</MudAlert>
                        }
                    </ChildContent>
                </MudExpansionPanel>

                <!-- Advanced Settings -->
                <MudExpansionPanel Text="Advanced Settings" IsInitiallyExpanded="false">
                    <TitleContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" Size="Size.Small" />
                            <MudText>Advanced Settings</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudTextField @bind-Value="actionNode.Action.PreviousTxId"
                                      Label="Previous Transaction ID"
                                      Variant="Variant.Outlined"
                                      Dense="true"
                                      ReadOnly="@(!IsEditMode)"
                                      Class="mb-2" />

                        <MudTextField @bind-Value="actionNode.Action.BlueprintId"
                                      Label="Blueprint ID"
                                      Variant="Variant.Outlined"
                                      Dense="true"
                                      ReadOnly="@(!IsEditMode)"
                                      Class="mb-2" />

                        <MudDivider Class="my-2" />

                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Action ID: @actionNode.NodeId
                        </MudText>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Unknown node type
            </MudText>
        }
    </div>
</MudDrawer>

@code {
    [Parameter]
    public BlueprintNodeModel? SelectedNode { get; set; }

    [Parameter]
    public EventCallback<BlueprintNodeModel?> SelectedNodeChanged { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public Blueprint? CurrentBlueprint { get; set; }

    private bool IsEditMode { get; set; } = false;

    private void ToggleEditMode()
    {
        IsEditMode = !IsEditMode;
    }

    private void UpdateNodeTitle(ActionNodeModel node)
    {
        node.Title = node.Action.Title;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        // Exit edit mode when selection changes
        if (SelectedNode != null)
        {
            IsEditMode = false;
        }
    }
}
