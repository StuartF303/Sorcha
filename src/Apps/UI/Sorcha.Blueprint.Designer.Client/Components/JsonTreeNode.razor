@using System.Text.Json

<div class="json-node" style="margin-left: @(Level * 20)px;">
    @if (Element.ValueKind == JsonValueKind.Object)
    {
        <div class="json-object">
            <span class="json-expand-toggle" @onclick="ToggleExpand" style="cursor: pointer; user-select: none; color: #808080;">
                @(isExpanded ? "▼" : "▶")
            </span>
            @if (!string.IsNullOrEmpty(PropertyName))
            {
                <span class="json-property" style="color: #9cdcfe;">@PropertyName</span><span style="color: #d4d4d4;">: </span>
            }
            <span style="color: #d4d4d4;">{</span>
            @if (!isExpanded)
            {
                <span style="color: #808080;"> ... </span>
            }
            <span style="color: #d4d4d4;">@(isExpanded ? "" : "}")</span>
        </div>

        @if (isExpanded)
        {
            @foreach (var property in Element.EnumerateObject())
            {
                <JsonTreeNode Element="property.Value" PropertyName="@property.Name" Level="@(Level + 1)" />
            }
            <div style="margin-left: @(Level * 20)px; color: #d4d4d4;">}</div>
        }
    }
    else if (Element.ValueKind == JsonValueKind.Array)
    {
        <div class="json-array">
            <span class="json-expand-toggle" @onclick="ToggleExpand" style="cursor: pointer; user-select: none; color: #808080;">
                @(isExpanded ? "▼" : "▶")
            </span>
            @if (!string.IsNullOrEmpty(PropertyName))
            {
                <span class="json-property" style="color: #9cdcfe;">@PropertyName</span><span style="color: #d4d4d4;">: </span>
            }
            <span style="color: #d4d4d4;">[</span>
            @if (!isExpanded)
            {
                <span style="color: #808080;"> @Element.GetArrayLength() items </span>
            }
            <span style="color: #d4d4d4;">@(isExpanded ? "" : "]")</span>
        </div>

        @if (isExpanded)
        {
            int index = 0;
            @foreach (var item in Element.EnumerateArray())
            {
                <JsonTreeNode Element="item" PropertyName="@index.ToString()" Level="@(Level + 1)" />
                index++;
            }
            <div style="margin-left: @(Level * 20)px; color: #d4d4d4;">]</div>
        }
    }
    else
    {
        <div class="json-value">
            @if (!string.IsNullOrEmpty(PropertyName))
            {
                <span class="json-property" style="color: #9cdcfe;">@PropertyName</span><span style="color: #d4d4d4;">: </span>
            }
            @switch (Element.ValueKind)
            {
                case JsonValueKind.String:
                    <span style="color: #ce9178;">"@Element.GetString()"</span>
                    break;
                case JsonValueKind.Number:
                    <span style="color: #b5cea8;">@Element.GetRawText()</span>
                    break;
                case JsonValueKind.True:
                case JsonValueKind.False:
                    <span style="color: #569cd6;">@Element.GetRawText()</span>
                    break;
                case JsonValueKind.Null:
                    <span style="color: #569cd6;">null</span>
                    break;
                default:
                    <span style="color: #d4d4d4;">@Element.GetRawText()</span>
                    break;
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public JsonElement Element { get; set; }

    [Parameter]
    public string? PropertyName { get; set; }

    [Parameter]
    public int Level { get; set; }

    private bool isExpanded = false;

    protected override void OnInitialized()
    {
        // Auto-expand root level and first level
        isExpanded = Level < 2;
    }

    private void ToggleExpand()
    {
        isExpanded = !isExpanded;
    }
}
