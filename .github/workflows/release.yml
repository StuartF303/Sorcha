name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }}

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Pack NuGet packages
      run: dotnet pack --no-build --configuration Release -p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output ./packages

    - name: Create Release Notes
      id: create_notes
      run: |
        echo "Creating release notes for version ${{ steps.get_version.outputs.VERSION }}"
        cat > release-notes.md << 'EOF'
        ## What's Changed

        See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

        ## Installation

        ### NuGet Packages

        ```bash
        dotnet add package Sorcha.Blueprint.Engine --version ${{ steps.get_version.outputs.VERSION }}
        ```

        ### Container Images

        ```bash
        docker pull ghcr.io/${{ github.repository_owner }}/sorcha:${{ steps.get_version.outputs.VERSION }}
        ```
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          packages/*.nupkg
          packages/*.snupkg
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to NuGet (Optional)
      if: ${{ !contains(steps.get_version.outputs.VERSION, 'alpha') && !contains(steps.get_version.outputs.VERSION, 'beta') }}
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      continue-on-error: true

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Blueprint Engine image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Sorcha.Blueprint.Engine/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/sorcha-blueprint-engine:${{ steps.get_version.outputs.VERSION }}
          ghcr.io/${{ github.repository_owner }}/sorcha-blueprint-engine:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Blueprint Designer image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Sorcha.Blueprint.Designer/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/sorcha-blueprint-designer:${{ steps.get_version.outputs.VERSION }}
          ghcr.io/${{ github.repository_owner }}/sorcha-blueprint-designer:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
